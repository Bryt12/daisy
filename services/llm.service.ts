/**
 * Checks if a token is punctuation.
 *
 * @param token - The token from the model to check.
 * @returns Whether the token is punctuation or not.
 */

const isPunctuation = (token: string): boolean => {
  return token === "." || token === "!" || token === "?" || token === ",";
};

/**
 * Handles the stream of tokens from the model.
 *
 * The function takes the partial response generated by the model so far and the
 * next token to be added to this response. Based on the token's value, the function
 * decides how it should be appended to the response.
 *
 * @param partialResponse - The response generated by the model so far.
 * @param token - The next token to be added to the response.
 * @returns The updated response after the token has been added.
 */
export const handleToken = (partialResponse: string, token: string): string => {
  let text = partialResponse;

  if (token === "\n") { // Don't want space before new line
    text += "\n";
  } else if (isPunctuation(token)) { // Don't want space before punctuation
    text += token;
  } else if (token === "") { // End character, end of reponse
    return text;
  } else { // Normal token
    // TODO: If a word is more than one token long there will be
    //       a space in the middle of the word.
    text += " " + token;
  }

  return text;
};
