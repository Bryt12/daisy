/**
 * Checks if a token is punctuation.
 *
 * @param token - The token from the model to check.
 * @returns Whether the token is punctuation or not.
 */

export const isPunctuation = (token: string): boolean => {
  return token === "." || token === "!" || token === "?" || token === ",";
};

/**
 * Checks if number is less than 3 digits.
 *
 * @param token - Token from model.
 * @returns Whether the number is less than 3 digits or not.
 */
export const isPositiveIntLessThan1000 = (token: string): boolean => {
  if (token === "" || token === " " || token === "\n") return false;
  try {
    return Number(token) < 1000 && Number(token) >= 0;
  } catch (e) {
    return false;
  }
};

/**
 * Handles the stream of tokens from the model.
 *
 * The function takes the partial response generated by the model so far and the
 * next token to be added to this response. Based on the token's value, the function
 * decides how it should be appended to the response.
 *
 * @param partialResponse - The response generated by the model so far.
 * @param token - The next token to be added to the response.
 * @returns The updated response after the token has been added.
 */
export const handleToken = (partialResponse: string, token: string): string => {
  let text = partialResponse;
  const lastChar = text[text.length - 1];

  if (token === "\n") { // Don't want space before new line
    text += "\n";
  } else if (_internals.isPunctuation(token)) { // Don't want space before punctuation
    text += token;
  } else if (
    _internals.isPositiveIntLessThan1000(token) &&
    (_internals.isPositiveIntLessThan1000(lastChar) || lastChar === ",")
  ) {
    // Each token is three numbers, so the number 999999 would be
    // represented as "999 999". This checks if the last token
    // was a number and if the current token is a number, and if
    // so, it doesn't add a space. Also checks if the last token
    // was a comma, because then it could be expressing a large
    // number.
    text += token;
  } else if (token === "") { // End character, end of reponse
    return text;
  } else { // Normal token
    // TODO: If a word is more than one token long there will be
    //       a space in the middle of the word.
    text += " " + token;
  }

  return text;
};

// Used to mock functions in tests
export const _internals = { isPunctuation, isPositiveIntLessThan1000 };
